{"ast":null,"code":"// import { useReducer } from \"react\";\n// import DigitButton from \"./components/DigitButton\";\n// import OperationButton from \"./components/OperationButton\";\n// import \"./style.css\";\n// // function preformed in state\n// // action = {type, payload}\n// // different types of actions and different actions\n// // actions pass along some parameters\n// // create global variable for actions\n// export const ACTIONS = {\n//   ADD_DIGIT: \"add-digit\",\n//   CHOOSE_OPERATION: \"choose-operation\",\n//   CLEAR: \"clear\",\n//   DELETE_DIGIT: \"delete-digit\",\n//   EVALUETE: \"evaluate\",\n// };\n// function reducer(state, { type, payload }) {\n//   switch (type) {\n//     case ACTIONS.ADD_DIGIT:\n//       // can`t add 0 to beginning\n//       if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n//        // if no currentOperand create new digit or show empty\n//       return {\n//         ...state,\n//         currentOperand: `${state.currentOperand || \"\"} ${payload.digit}`,\n//       };\n//   }\n// }\n// function App() {\n//   // use reducers\n//   // convert current state to a new version of the state\n//   // based on an action sended\n//   // {previousOperand, currentOperand, operation} = state\n//   const [{ previousOperand, currentOperand, operation }, dispatch] = useReducer(\n//     reducer,\n//     {}\n//   );\n//   // dispatch({ type: ACTIONS.ADD_DIGIT, payload: {digit:1}})\n//   return (\n//     <div className=\"calculator-grid\">\n//       <div className=\"output\">\n//         {/* state variables put in*/}\n//         <div className=\"previous-operand\">\n//           {previousOperand}\n//           {operation}\n//         </div>\n//         <div className=\"current-operand\">{currentOperand}</div>\n//       </div>\n//       <button className=\"span-two\">AC</button>\n//       <button>DEL</button>\n//       <OperationButton operation=\"รท\" dispatch={dispatch} />\n//       <DigitButton digit=\"1\" dispatch={dispatch} />\n//       <DigitButton digit=\"2\" dispatch={dispatch} />\n//       <DigitButton digit=\"3\" dispatch={dispatch} />\n//       <OperationButton operation=\"*\" dispatch={dispatch} />\n//       <DigitButton digit=\"4\" dispatch={dispatch} />\n//       <DigitButton digit=\"5\" dispatch={dispatch} />\n//       <DigitButton digit=\"6\" dispatch={dispatch} />\n//       <OperationButton operation=\"+\" dispatch={dispatch} />\n//       <DigitButton digit=\"7\" dispatch={dispatch} />\n//       <DigitButton digit=\"8\" dispatch={dispatch} />\n//       <DigitButton digit=\"9\" dispatch={dispatch} />\n//       <OperationButton operation=\"-\" dispatch={dispatch} />\n//       <OperationButton operation=\".\" dispatch={dispatch} />\n//       <DigitButton digit=\"0\" dispatch={dispatch} />\n//       <button className=\"span-two\">=</button>\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/taniashershen/Desktop/WEB/calculator/src/App.js"],"sourcesContent":["// import { useReducer } from \"react\";\n// import DigitButton from \"./components/DigitButton\";\n// import OperationButton from \"./components/OperationButton\";\n// import \"./style.css\";\n\n// // function preformed in state\n// // action = {type, payload}\n// // different types of actions and different actions\n// // actions pass along some parameters\n\n// // create global variable for actions\n// export const ACTIONS = {\n//   ADD_DIGIT: \"add-digit\",\n//   CHOOSE_OPERATION: \"choose-operation\",\n//   CLEAR: \"clear\",\n//   DELETE_DIGIT: \"delete-digit\",\n//   EVALUETE: \"evaluate\",\n// };\n\n// function reducer(state, { type, payload }) {\n//   switch (type) {\n   \n//     case ACTIONS.ADD_DIGIT:\n//       // can`t add 0 to beginning\n//       if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n\n//        // if no currentOperand create new digit or show empty\n//       return {\n//         ...state,\n//         currentOperand: `${state.currentOperand || \"\"} ${payload.digit}`,\n//       };\n//   }\n// }\n\n// function App() {\n//   // use reducers\n//   // convert current state to a new version of the state\n//   // based on an action sended\n//   // {previousOperand, currentOperand, operation} = state\n//   const [{ previousOperand, currentOperand, operation }, dispatch] = useReducer(\n//     reducer,\n//     {}\n//   );\n\n//   // dispatch({ type: ACTIONS.ADD_DIGIT, payload: {digit:1}})\n\n//   return (\n//     <div className=\"calculator-grid\">\n//       <div className=\"output\">\n//         {/* state variables put in*/}\n//         <div className=\"previous-operand\">\n//           {previousOperand}\n//           {operation}\n//         </div>\n//         <div className=\"current-operand\">{currentOperand}</div>\n//       </div>\n//       <button className=\"span-two\">AC</button>\n//       <button>DEL</button>\n//       <OperationButton operation=\"รท\" dispatch={dispatch} />\n\n//       <DigitButton digit=\"1\" dispatch={dispatch} />\n//       <DigitButton digit=\"2\" dispatch={dispatch} />\n//       <DigitButton digit=\"3\" dispatch={dispatch} />\n\n//       <OperationButton operation=\"*\" dispatch={dispatch} />\n\n//       <DigitButton digit=\"4\" dispatch={dispatch} />\n//       <DigitButton digit=\"5\" dispatch={dispatch} />\n//       <DigitButton digit=\"6\" dispatch={dispatch} />\n//       <OperationButton operation=\"+\" dispatch={dispatch} />\n\n//       <DigitButton digit=\"7\" dispatch={dispatch} />\n//       <DigitButton digit=\"8\" dispatch={dispatch} />\n//       <DigitButton digit=\"9\" dispatch={dispatch} />\n\n//       <OperationButton operation=\"-\" dispatch={dispatch} />\n//       <OperationButton operation=\".\" dispatch={dispatch} />\n\n//       <DigitButton digit=\"0\" dispatch={dispatch} />\n\n//       <button className=\"span-two\">=</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}